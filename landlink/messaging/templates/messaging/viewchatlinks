{% extends 'account/base.html' %}

{% block title %}
  {% if user_chats %}
    {% for chat in user_chats %}
      {% for member in chat.members.all %}
        {% if member != request.user %}
          Chatting with {{ member.username }}
        {% endif %}
      {% endfor %}
    {% endfor %}
  {% endif %}
{% endblock %}

{% block content %}
<div class="container">
    <div class="row">
        <div class="col-md-12">
            {% if user_chats %}
            <h2>Your Chats</h2>
            <ul class="list-group">
                {% for chat in user_chats %}
                <li class="list-group-item">
                    {% for member in chat.members.all %}
                    {% if member != request.user %}
                    <i class="fas fa-user-circle"></i> Chat with {{ member.username }}
                    <a href="{% url 'open_chat' chat.id %}" class="btn btn-primary">Open Chat</a>
                    <form action="{% url 'delete_chat' chat.id %}" method="post" style="display: inline;">
                        {% csrf_token %}
                        <button type="submit" class="btn btn-danger">Delete Chat</button>
                    </form>
                    {% endif %}
                    {% endfor %}
                </li>
                {% endfor %}
            </ul>
            {% else %}
            <p>No chats available.</p>
            {% endif %}
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-md-12">
            <a href="{% url 'exit_chat' %}" class="btn btn-danger">Exit Chat</a>
        </div>
    </div>
</div>
{% endblock %}





messaging models.py 
# messaging/models.py
from django.conf import settings
from django.db import models
from django.contrib.auth.models import User


class Chat(models.Model):
    sender = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='sender_chats')
    receiver = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='receiver_chats')
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Chat {self.id}"
    

class Message(models.Model):
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)
    chat = models.ForeignKey(Chat, on_delete=models.CASCADE, related_name='messages')

    def __str__(self):
        return f"From {self.sender} to {self.receiver}: {self.content[:50]}"

